LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.numeric_std.ALL;

ENTITY ULA IS
    PORT (
        clk   : IN STD_LOGIC;                -- Sinal de clock
        rst   : IN STD_LOGIC;                -- Sinal de reset
        A, B  : IN STD_LOGIC_VECTOR(3 DOWNTO 0);  -- Entradas de 4 bits
        SS    : IN STD_LOGIC_VECTOR(1 DOWNTO 0);  -- Seletor de operação
        F     : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);  -- Saída de 4 bits
        over  : OUT STD_LOGIC;               -- Overflow
        c_out : OUT STD_LOGIC                -- Carry Out
    );
END ULA;

ARCHITECTURE Behavioral OF ULA IS
BEGIN
    PROCESS (clk, rst)
        VARIABLE temp : UNSIGNED(4 DOWNTO 0); -- Alterado para UNSIGNED
    BEGIN
        IF rst = '1' THEN
            -- Resetar as saídas em caso de reset ativo
            F <= "0000";
            over <= '0';
            c_out <= '0';
        ELSIF rising_edge(clk) THEN
            -- Caso de transição de subida do clock
            CASE SS IS
                WHEN "00" =>  -- Soma A + B
                    temp := ("0" & UNSIGNED(A)) + ("0" & UNSIGNED(B));
                    F <= STD_LOGIC_VECTOR(temp(3 DOWNTO 0));
                    c_out <= temp(4);
                    over <= (A(3) AND B(3) AND (NOT temp(3))) OR ((NOT A(3)) AND (NOT B(3)) AND temp(3));
                
                WHEN "01" =>  -- Subtração A - B
                    temp := ("0" & UNSIGNED(A)) - ("0" & UNSIGNED(B));
                    F <= STD_LOGIC_VECTOR(temp(3 DOWNTO 0));
                    c_out <= temp(4);
                    over <= (A(3) AND (NOT B(3)) AND (NOT temp(3))) OR ((NOT A(3)) AND B(3) AND temp(3));
                
                WHEN "10" =>  -- Operação lógica AND
                    F <= A AND B;
                    over <= '0';
                    c_out <= '0';
                
                WHEN "11" =>  -- Operação lógica OR
                    F <= A OR B;
                    over <= '0';
                    c_out <= '0';
                
                WHEN OTHERS =>
                    F <= "0000";
                    over <= '0';
                    c_out <= '0';
            END CASE;
        END IF;
    END PROCESS;
END Behavioral;
